"use strict";(()=>{var e={};e.id=538,e.ids=[538],e.modules={11185:e=>{e.exports=require("mongoose")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},52055:(e,t,n)=>{n.r(t),n.d(t,{originalPathname:()=>h,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>d,serverHooks:()=>g,staticGenerationAsyncStorage:()=>f});var r={};n.r(r),n.d(r,{GET:()=>p,POST:()=>c});var o=n(16078),a=n(68203),i=n(24960),s=n(20049),u=n(70321),l=n(13494);async function c(e){try{await (0,u.ZP)();let t=await e.json();if(console.log("Received signup data:",t),!t.username||!t.email||!t.password)return s.NextResponse.json({error:"모든 필드를 입력해주세요."},{status:400});let n=await l.Z.create(t);return s.NextResponse.json({message:"회원가입 성공",user:{id:n._id,username:n.username,email:n.email}},{status:201})}catch(e){if(console.error("Signup error:",e),11e3===e.code)return s.NextResponse.json({error:"이미 사용 중인 이메일 또는 사용자 이름입니다."},{status:400});if("ValidationError"===e.name){let t=Object.values(e.errors).map(e=>e.message);return s.NextResponse.json({error:t.join(", ")},{status:400})}return s.NextResponse.json({error:"회원가입 중 오류가 발생했습니다."},{status:500})}}async function p(){return s.NextResponse.json({success:!1,message:"지원되지 않는 메소드입니다."},{status:405})}let d=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/signup/route",pathname:"/api/signup",filename:"route",bundlePath:"app/api/signup/route"},resolvedPagePath:"C:\\Users\\이지은 선임\\2u_lab\\2u_tubelab\\frontend\\app\\api\\signup\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:f,serverHooks:g}=d,h="/api/signup/route";function w(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:f})}},13494:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(11185),o=n.n(r),a=n(80950),i=n.n(a),s=n(84770),u=n.n(s);let l=new r.Schema({username:{type:String,required:[!0,"사용자 이름은 필수입니다."],unique:!0,trim:!0,minlength:[3,"사용자 이름은 최소 3자 이상이어야 합니다."],maxlength:[20,"사용자 이름은 최대 20자까지 가능합니다."]},email:{type:String,required:[!0,"이메일은 필수입니다."],unique:!0,lowercase:!0,validate:{validator:function(e){return/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(e)},message:"유효한 이메일 주소를 입력해주세요."}},password:{type:String,required:[!0,"비밀번호는 필수입니다."],minlength:8,select:!1},profileInfo:{fullName:String,nickname:String,profileImage:String,bio:{type:String,maxlength:[200,"자기소개는 최대 200자까지 가능합니다."]}},accountStatus:{isVerified:{type:Boolean,default:!1},isActive:{type:Boolean,default:!0},registrationDate:{type:Date,default:Date.now},lastLoginDate:Date},activityMetrics:{totalLogins:{type:Number,default:0},totalVideoUploads:{type:Number,default:0},totalComments:{type:Number,default:0},totalLikes:{type:Number,default:0}},preferences:{language:{type:String,default:"ko"},theme:{type:String,default:"light"},notifications:{email:{type:Boolean,default:!0},push:{type:Boolean,default:!0}}},emailVerificationToken:String,emailVerificationExpires:Date,passwordResetToken:String,passwordResetExpires:Date});l.pre("save",async function(e){if(!this.isModified("password"))return e();this.password=await i().hash(this.password,12),e()}),l.methods.correctPassword=async function(e,t){return await i().compare(e,t)},l.methods.createPasswordResetToken=function(){let e=u().randomBytes(32).toString("hex");return this.passwordResetToken=u().createHash("sha256").update(e).digest("hex"),this.passwordResetExpires=new Date(Date.now()+6e5),e},l.statics.findByEmail=function(e){return this.findOne({email:e})},l.methods.createEmailVerificationToken=function(){let e=u().randomBytes(32).toString("hex");return this.emailVerificationToken=u().createHash("sha256").update(e).digest("hex"),this.emailVerificationExpires=new Date(Date.now()+864e5),e},l.virtual("fullName").get(function(){return`${this.profileInfo.fullName||""} (${this.username})`}),l.index({username:1,email:1});let c=o().model("User",l)},70321:(e,t,n)=>{n.d(t,{ZP:()=>l,vO:()=>c});var r=n(11185),o=n.n(r);let a=process.env.MONGODB_URI,i=process.env.MONGODB_DB;if(!a)throw Error("환경 변수에 MONGODB_URI가 설정되지 않았습니다");if(!i)throw Error("환경 변수에 MONGODB_DB가 설정되지 않았습니다");let s={isConnected:o().ConnectionStates.disconnected};async function u(e){if(s.isConnected===o().ConnectionStates.connected)return console.log("이미 데이터베이스에 연결되어 있습니다."),o();try{let t=await o().connect(e||a,{bufferCommands:!1,dbName:i,maxPoolSize:10,minPoolSize:5,connectTimeoutMS:1e4,socketTimeoutMS:45e3,serverSelectionTimeoutMS:5e3,family:4,retryWrites:!0,w:"majority"});return s.isConnected=t.connections[0].readyState,console.log("MongoDB 연결 성공"),t}catch(e){throw console.error("MongoDB 연결 실패:",e),e}}let l=u;async function c(e){return await u(e),{client:o().connection.client,db:o().connection.db}}}};var t=require("../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[130,221,950],()=>n(52055));module.exports=r})();